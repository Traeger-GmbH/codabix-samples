{"version":3,"file":"read-node.js","sourceRoot":"","sources":["../../src/lib/read-node.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;GAkBG;AAEH,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,UAAU,EAAS,UAAU,EAAU,SAAS,EAAE,MAAM,WAAW,CAAC;AAatG,MAAM,OAAO,aAAc,SAAQ,SAAS;CAG3C;AAED,MAAM,OAAO,cAAe,SAAQ,UAAU;CAE7C;AAED,MAAM,OAAO,iBAAkB,SAAQ,aAAa;CAEnD;AAED,MAAM,OAAO,YAAa,SAAQ,QAAQ;CAEzC;AAED,MAAM,OAAO,cAAe,SAAQ,UAAU;CAE7C","sourcesContent":["/**\r\n * If you import a dependency which does not include its own type definitions,\r\n * TypeScript will try to find a definition for it by following the `typeRoots`\r\n * compiler option in tsconfig.json. For this project, we've configured it to\r\n * fall back to this folder if nothing is found in node_modules/@types.\r\n *\r\n * Often, you can install the DefinitelyTyped\r\n * (https://github.com/DefinitelyTyped/DefinitelyTyped) type definition for the\r\n * dependency in question. However, if no one has yet contributed definitions\r\n * for the package, you may want to declare your own. (If you're using the\r\n * `noImplicitAny` compiler options, you'll be required to declare it.)\r\n *\r\n * This is an example type definition which allows import from `module-name`,\r\n * e.g.:\r\n * ```ts\r\n * import something from 'module-name';\r\n * something();\r\n * ```\r\n */\r\n\r\nimport { DirectoryNode, FileNode, FolderNode, INode, MethodNode, NodeId, ValueNode } from \"./node.js\";\r\nimport { INodeValue } from \"./node-value.js\";\r\n\r\n\r\nexport interface IReadNode extends INode {\r\n  id: NodeId;\r\n}\r\n\r\nexport interface IReadValueNode extends IReadNode {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  value?: INodeValue;\r\n}\r\n\r\nexport class ReadValueNode extends ValueNode implements IReadValueNode {\r\n  id: NodeId;\r\n  value?: INodeValue;\r\n}\r\n\r\nexport class ReadFolderNode extends FolderNode implements IReadNode {\r\n  id: NodeId;\r\n}\r\n\r\nexport class ReadDirectoryNode extends DirectoryNode implements IReadNode {\r\n  id: NodeId;\r\n}\r\n\r\nexport class ReadFileNode extends FileNode implements IReadNode {\r\n  id: NodeId;\r\n}\r\n\r\nexport class ReadMethodNode extends MethodNode implements IReadNode {\r\n  id: NodeId;\r\n}\r\n\r\nexport type ReadNode = ReadValueNode | ReadFolderNode | ReadDirectoryNode | ReadFileNode | ReadMethodNode;\r\n"]}